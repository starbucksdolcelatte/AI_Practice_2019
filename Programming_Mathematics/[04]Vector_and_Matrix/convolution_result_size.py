'''
컨볼루션 연산에서는 이미지 I의 크기와 커널 K의 크기,
그리고 패딩 및 스트라이드의 값에 따라 결과의 크기가 달라지게 됩니다.

이미지 I의 크기, 커널 K의 크기, 패딩 수, 스트라이드 값이 주어졌을때
I⊛K의 크기를 계산하는 함수를 작성해 봅시다.

[입력]
I: I의 크기 (h, w) 튜플
K: K의 크기 (h, w) 튜플
p: I의 패딩 수 (h, w) 튜플
s: 컨볼루션의 스트라이드 값 (h, w) 튜플

[출력]
I와 K의 2D 컨볼루션 결과의 (높이, 너비)

[실행 결과]
>>> conv_size((5, 5), (3, 3), (0, 0), (1, 1))
(3, 3)
>>> conv_size((2, 2), (2, 2), (1, 1), (2, 2))
(2, 2)
>>> conv_size((6, 17), (1, 3), (1, 2), (1, 2))
(8, 10)
'''

import numpy as np

def conv_size(I, K, p, s):
    # To-do
    # padding은 가로의 경우 양옆에 두번, 세로는 위아래로 두번 오기 때문에 *2
    i = 0
    while (I[0] + p[0]*2 > K[0] + s[0]*i):
        i+= 1

    j = 0
    while (I[1] + p[1]*2 > K[1] + s[1]*j):
        j+= 1

    return (i+1, j+1)


print(conv_size((5, 5), (3, 3), (0, 0), (1, 1)))
